{ "time": "2019-11-17 13:44:23.9309", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 13:44:27.7947", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 13:44:27.8074", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 13:44:27.8104", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 13:44:27.8137", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 13:44:27.9630", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 13:44:28.0978", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 135.3726ms 301 ", "properties": { "ElapsedMilliseconds": 135.3726, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 13:44:28.1307", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 13:44:28.2700", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 138.9198ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 138.9198, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 13:44:29.4117", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 13:44:29.4191", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 8.0006ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 8.0006, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 13:44:29.8882", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 13:44:30.0352", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 150.1665ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 150.1665, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 13:45:10.0972", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 13:45:10.1067", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 13:45:10.1459", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 13:45:10.7001", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "Retrieving all appointments from DB...", "properties": {  } }
{ "time": "2019-11-17 13:45:11.0465", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "3 appointments found.", "properties": {  } }
{ "time": "2019-11-17 13:45:11.0895", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor", "message": "Executing JsonResult, writing value of type 'System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "properties": { "Type": "System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId_Id": 1, "EventId_Name": "JsonResultExecuting", "EventId": {"Id":1, "Name":"JsonResultExecuting"} } }
{ "time": "2019-11-17 13:45:11.1095", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 954.0508000000001ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 954.0508000000001, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 13:45:11.1133", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 13:45:11.1177", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 1021.3710000000001ms 200 application\/json; charset=utf-8", "properties": { "ElapsedMilliseconds": 1021.3710000000001, "StatusCode": 200, "ContentType": "application\/json; charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:15.9741", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 15:05:17.7605", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 15:05:17.7722", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 15:05:17.7751", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 15:05:17.7781", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 15:05:17.8985", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:18.0291", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 132.0547ms 301 ", "properties": { "ElapsedMilliseconds": 132.0547, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:18.0611", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:18.1993", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 137.719ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 137.719, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:19.3432", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:19.3513", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 9.9458ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 9.9458, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:20.0829", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:20.2072", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 124.5458ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 124.5458, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:26.1866", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:26.1977", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 15:05:26.2388", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 15:05:26.7885", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "Retrieving all appointments from DB...", "properties": {  } }
{ "time": "2019-11-17 15:05:47.5981", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "3 appointments found.", "properties": {  } }
{ "time": "2019-11-17 15:05:47.6473", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor", "message": "Executing JsonResult, writing value of type 'System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "properties": { "Type": "System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId_Id": 1, "EventId_Name": "JsonResultExecuting", "EventId": {"Id":1, "Name":"JsonResultExecuting"} } }
{ "time": "2019-11-17 15:05:47.6713", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 21422.9542ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 21422.9542, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 15:05:47.6752", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 15:05:47.6809", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 21494.6603ms 200 application\/json; charset=utf-8", "properties": { "ElapsedMilliseconds": 21494.6603, "StatusCode": 200, "ContentType": "application\/json; charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:05:57.9696", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:05:57.9967", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 15:05:58.0006", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 15:05:58.0115", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "Retrieving all appointments from DB...", "properties": {  } }
{ "time": "2019-11-17 15:05:58.0172", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "3 appointments found.", "properties": {  } }
{ "time": "2019-11-17 15:05:58.0203", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor", "message": "Executing JsonResult, writing value of type 'System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "properties": { "Type": "System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId_Id": 1, "EventId_Name": "JsonResultExecuting", "EventId": {"Id":1, "Name":"JsonResultExecuting"} } }
{ "time": "2019-11-17 15:05:58.0246", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 20.6095ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 20.6095, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 15:05:58.0283", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 15:05:58.0313", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 62.702200000000005ms 200 application\/json; charset=utf-8", "properties": { "ElapsedMilliseconds": 62.702200000000005, "StatusCode": 200, "ContentType": "application\/json; charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:09:26.9143", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 15:09:28.7579", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 15:09:28.7969", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 15:09:28.8017", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 15:09:28.8060", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 15:09:28.9206", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:09:29.0542", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 135.29760000000002ms 301 ", "properties": { "ElapsedMilliseconds": 135.29760000000002, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:09:29.0871", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:09:29.2322", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 144.59640000000002ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 144.59640000000002, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:09:30.4818", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:09:30.4921", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 10.067ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 10.067, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 15:09:31.1199", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 15:09:31.2483", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 128.56050000000002ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 128.56050000000002, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:41:23.5250", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 16:41:25.3350", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 16:41:25.3468", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 16:41:25.3497", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 16:41:25.3526", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 16:41:25.4913", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:41:25.6313", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 142.0367ms 301 ", "properties": { "ElapsedMilliseconds": 142.0367, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:41:25.6654", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:41:25.8201", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 154.00560000000002ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 154.00560000000002, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:41:27.0102", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:41:27.0206", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 11.8023ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 11.8023, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:41:27.7334", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:41:27.8740", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 139.5529ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 139.5529, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:41:37.5951", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:41:37.6081", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 16:41:37.6482", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 16:41:39.1622", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 1504.7561ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 1504.7561, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 16:41:39.1665", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 16:41:39.2026", "level": "ERROR", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "message": "An unhandled exception has occurred while executing the request.", "properties": { "exception": "System.InvalidOperationException: Error constructing handler for request of type MediatR.IRequestHandler`2[EventStoreLearning.Common.Querying.QueryRequest`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]],EventStoreLearning.Common.Querying.QueryResponse`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]]]. Register your handlers with the container. See the samples in GitHub for examples.\n ---> Autofac.Core.DependencyResolutionException: An exception was thrown while activating EventStoreLearning.Appointment.ReadModel.Services.AppointmentService -> EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository -> \u03bb:MongoDB.Driver.IMongoDatabase.\n ---> System.ArgumentNullException: Value cannot be null. (Parameter 'connectionString')\n   at MongoDB.Driver.Core.Misc.Ensure.IsNotNull[T](T value, String paramName)\n   at MongoDB.Driver.Core.Configuration.ConnectionString..ctor(String connectionString)\n   at MongoDB.Driver.MongoUrlBuilder.Parse(String url)\n   at MongoDB.Driver.MongoUrlBuilder..ctor(String url)\n   at MongoDB.Driver.MongoUrl..ctor(String url)\n   at MongoDB.Driver.MongoClientSettings.FromConnectionString(String connectionString)\n   at MongoDB.Driver.MongoClient..ctor(String connectionString)\n   at EventStoreLearning.Mongo.MongoContainerBuilderExtenstions.<>c__DisplayClass0_0.<ConfigureMongo>b__0(IComponentContext context) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Mongo\/MongoContainerBuilderExtenstions.cs:line 34\n   at Autofac.RegistrationExtensions.<>c__DisplayClass5_0`1.<Register>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Builder.RegistrationBuilder.<>c__DisplayClass0_0`1.<ForDelegate>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   --- End of inner exception stack trace ---\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   at Autofac.Core.Resolving.InstanceLookup.Execute()\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance)\n   at Autofac.ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType)\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetService(Type serviceType)\n   at MediatR.ServiceFactoryExtensions.GetInstance[T](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   --- End of inner exception stack trace ---\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerWrapperImpl`2.<>c__DisplayClass0_0.<Handle>g__Handler|0()\n   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at EventStoreLearning.Appointment.ReadModel.AppointmentQueryMediator.Query[TQuery,TResult](TQuery query, CancellationToken cancelationToken) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/appointment\/EventStoreLearning.Appointment.ReadModel\/AppointmentQueryMediator.cs:line 23\n   at EventStoreLearning.Common.Web.BaseQueryController.PublishQuery[TQuery,TResult](TQuery query) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Common.Web\/BaseQueryController.cs:line 27\n   at EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get() in \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi\/Controllers\/AppointmentController.cs:line 60\n   at lambda_method(Closure , Object )\n   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "EventId_Id": 1, "EventId_Name": "UnhandledException", "EventId": {"Id":1, "Name":"UnhandledException"} } }
{ "time": "2019-11-17 16:41:39.2754", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 1681.4937ms 500 text\/plain", "properties": { "ElapsedMilliseconds": 1681.4937, "StatusCode": 500, "ContentType": "text\/plain", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:43:56.8661", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 16:43:58.5571", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 16:43:58.5683", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 16:43:58.5714", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 16:43:58.5747", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 16:43:58.7018", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:43:58.8297", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 129.5627ms 301 ", "properties": { "ElapsedMilliseconds": 129.5627, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:43:58.8612", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:43:59.0201", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 158.4539ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 158.4539, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:44:00.1456", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:44:00.1560", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 40.909600000000005ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 40.909600000000005, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:44:00.5812", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:44:00.7292", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 151.5342ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 151.5342, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:44:05.1771", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:44:05.1895", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 16:44:05.2317", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 16:44:06.7529", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 1510.8874ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 1510.8874, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 16:44:06.7578", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 16:44:06.7883", "level": "ERROR", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "message": "An unhandled exception has occurred while executing the request.", "properties": { "exception": "System.InvalidOperationException: Error constructing handler for request of type MediatR.IRequestHandler`2[EventStoreLearning.Common.Querying.QueryRequest`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]],EventStoreLearning.Common.Querying.QueryResponse`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]]]. Register your handlers with the container. See the samples in GitHub for examples.\n ---> Autofac.Core.DependencyResolutionException: An exception was thrown while activating EventStoreLearning.Appointment.ReadModel.Services.AppointmentService -> EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository -> \u03bb:MongoDB.Driver.IMongoDatabase.\n ---> System.ArgumentNullException: Value cannot be null. (Parameter 'connectionString')\n   at MongoDB.Driver.Core.Misc.Ensure.IsNotNull[T](T value, String paramName)\n   at MongoDB.Driver.Core.Configuration.ConnectionString..ctor(String connectionString)\n   at MongoDB.Driver.MongoUrlBuilder.Parse(String url)\n   at MongoDB.Driver.MongoUrlBuilder..ctor(String url)\n   at MongoDB.Driver.MongoUrl..ctor(String url)\n   at MongoDB.Driver.MongoClientSettings.FromConnectionString(String connectionString)\n   at MongoDB.Driver.MongoClient..ctor(String connectionString)\n   at EventStoreLearning.Mongo.MongoContainerBuilderExtenstions.<>c__DisplayClass0_0.<ConfigureMongo>b__0(IComponentContext context) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Mongo\/MongoContainerBuilderExtenstions.cs:line 39\n   at Autofac.RegistrationExtensions.<>c__DisplayClass5_0`1.<Register>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Builder.RegistrationBuilder.<>c__DisplayClass0_0`1.<ForDelegate>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   --- End of inner exception stack trace ---\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   at Autofac.Core.Resolving.InstanceLookup.Execute()\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance)\n   at Autofac.ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType)\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetService(Type serviceType)\n   at MediatR.ServiceFactoryExtensions.GetInstance[T](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   --- End of inner exception stack trace ---\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerWrapperImpl`2.<>c__DisplayClass0_0.<Handle>g__Handler|0()\n   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at EventStoreLearning.Appointment.ReadModel.AppointmentQueryMediator.Query[TQuery,TResult](TQuery query, CancellationToken cancelationToken) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/appointment\/EventStoreLearning.Appointment.ReadModel\/AppointmentQueryMediator.cs:line 23\n   at EventStoreLearning.Common.Web.BaseQueryController.PublishQuery[TQuery,TResult](TQuery query) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Common.Web\/BaseQueryController.cs:line 27\n   at EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get() in \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi\/Controllers\/AppointmentController.cs:line 60\n   at lambda_method(Closure , Object )\n   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "EventId_Id": 1, "EventId_Name": "UnhandledException", "EventId": {"Id":1, "Name":"UnhandledException"} } }
{ "time": "2019-11-17 16:44:06.8146", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 1638.9013ms 500 text\/plain", "properties": { "ElapsedMilliseconds": 1638.9013, "StatusCode": 500, "ContentType": "text\/plain", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:45:58.6225", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 16:46:00.3391", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 16:46:00.3507", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 16:46:00.3542", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 16:46:00.3574", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 16:46:00.4754", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:46:00.6256", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 128.8894ms 301 ", "properties": { "ElapsedMilliseconds": 128.8894, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:46:00.6602", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:46:00.8020", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 141.495ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 141.495, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:46:01.9289", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:46:01.9370", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 8.7887ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 8.7887, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:46:02.3498", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:46:02.5064", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 157.92510000000001ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 157.92510000000001, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:46:06.9212", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:46:06.9340", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 16:46:06.9752", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 16:46:08.3994", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 1415.0063ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 1415.0063, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 16:46:08.4037", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 16:46:08.4291", "level": "ERROR", "logger": "Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware", "message": "An unhandled exception has occurred while executing the request.", "properties": { "exception": "System.InvalidOperationException: Error constructing handler for request of type MediatR.IRequestHandler`2[EventStoreLearning.Common.Querying.QueryRequest`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]],EventStoreLearning.Common.Querying.QueryResponse`2[EventStoreLearning.Appointment.ReadModel.Queries.RetrieveAllAppointmentsQuery,System.Collections.Generic.IList`1[EventStoreLearning.Appointment.ReadModels.Models.AppointmentReadModel]]]. Register your handlers with the container. See the samples in GitHub for examples.\n ---> Autofac.Core.DependencyResolutionException: An exception was thrown while activating EventStoreLearning.Appointment.ReadModel.Services.AppointmentService -> EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository -> \u03bb:MongoDB.Driver.IMongoDatabase.\n ---> System.InvalidOperationException: Invalid MongoDB config!\n   at EventStoreLearning.Mongo.MongoContainerBuilderExtenstions.<>c__DisplayClass0_0.<ConfigureMongo>b__0(IComponentContext context) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Mongo\/MongoContainerBuilderExtenstions.cs:line 44\n   at Autofac.RegistrationExtensions.<>c__DisplayClass5_0`1.<Register>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Builder.RegistrationBuilder.<>c__DisplayClass0_0`1.<ForDelegate>b__0(IComponentContext c, IEnumerable`1 p)\n   at Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(IComponentContext context, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   --- End of inner exception stack trace ---\n   at Autofac.Core.Resolving.InstanceLookup.Activate(IEnumerable`1 parameters, Object& decoratorTarget)\n   at Autofac.Core.Resolving.InstanceLookup.Execute()\n   at Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(ISharingLifetimeScope currentOperationScope, IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Resolving.ResolveOperation.Execute(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(IComponentRegistration registration, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.TryResolveService(IComponentContext context, Service service, IEnumerable`1 parameters, Object& instance)\n   at Autofac.ResolutionExtensions.ResolveOptionalService(IComponentContext context, Service service, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType, IEnumerable`1 parameters)\n   at Autofac.ResolutionExtensions.ResolveOptional(IComponentContext context, Type serviceType)\n   at Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetService(Type serviceType)\n   at MediatR.ServiceFactoryExtensions.GetInstance[T](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   --- End of inner exception stack trace ---\n   at MediatR.Internal.RequestHandlerBase.GetHandler[THandler](ServiceFactory factory)\n   at MediatR.Internal.RequestHandlerWrapperImpl`2.<>c__DisplayClass0_0.<Handle>g__Handler|0()\n   at MediatR.Pipeline.RequestPostProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at MediatR.Pipeline.RequestPreProcessorBehavior`2.Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate`1 next)\n   at EventStoreLearning.Appointment.ReadModel.AppointmentQueryMediator.Query[TQuery,TResult](TQuery query, CancellationToken cancelationToken) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/appointment\/EventStoreLearning.Appointment.ReadModel\/AppointmentQueryMediator.cs:line 23\n   at EventStoreLearning.Common.Web.BaseQueryController.PublishQuery[TQuery,TResult](TQuery query) in \/Users\/matholum\/Repos\/EventStoreLearning2\/libs\/EventStoreLearning.Common.Web\/BaseQueryController.cs:line 27\n   at EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get() in \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi\/Controllers\/AppointmentController.cs:line 60\n   at lambda_method(Closure , Object )\n   at Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable.Awaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)", "EventId_Id": 1, "EventId_Name": "UnhandledException", "EventId": {"Id":1, "Name":"UnhandledException"} } }
{ "time": "2019-11-17 16:46:08.4539", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 1534.7407ms 500 text\/plain", "properties": { "ElapsedMilliseconds": 1534.7407, "StatusCode": 500, "ContentType": "text\/plain", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:48:17.3484", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.QueryApi.Program", "message": "init main", "properties": {  } }
{ "time": "2019-11-17 16:48:19.0917", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Now listening on: https:\/\/localhost:5001", "properties": { "address": "https:\/\/localhost:5001" } }
{ "time": "2019-11-17 16:48:19.1058", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down.", "properties": {  } }
{ "time": "2019-11-17 16:48:19.1088", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "properties": { "envName": "Development" } }
{ "time": "2019-11-17 16:48:19.1121", "level": "INFO", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: \/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi", "properties": { "contentRoot": "\/Users\/matholum\/Repos\/EventStoreLearning2\/apps\/appointment\/EventStoreLearning.Appointment.QueryApi" } }
{ "time": "2019-11-17 16:48:19.2347", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:48:19.3687", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 135.22060000000002ms 301 ", "properties": { "ElapsedMilliseconds": 135.22060000000002, "StatusCode": 301, "ContentType": null, "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:48:19.4012", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:48:19.5443", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 142.96800000000002ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 142.96800000000002, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:48:20.6800", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/index.html  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/index.html", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:48:20.6880", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 7.555700000000001ms 200 text\/html;charset=utf-8", "properties": { "ElapsedMilliseconds": 7.555700000000001, "StatusCode": 200, "ContentType": "text\/html;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:48:21.1400", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/swagger\/v1\/swagger.json  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/swagger\/v1\/swagger.json", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:48:21.2931", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 171.8427ms 200 application\/json;charset=utf-8", "properties": { "ElapsedMilliseconds": 171.8427, "StatusCode": 200, "ContentType": "application\/json;charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
{ "time": "2019-11-17 16:48:28.9383", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP\/1.1 GET https:\/\/localhost:5001\/v1\/Appointment  ", "properties": { "Protocol": "HTTP\/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "https", "Host": "localhost:5001", "PathBase": "", "Path": "\/v1\/Appointment", "QueryString": "", "EventId_Id": 1, "EventId_Name": null, "EventId": {"Id":1} } }
{ "time": "2019-11-17 16:48:28.9499", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 0, "EventId_Name": "ExecutingEndpoint", "EventId": {"Id":0, "Name":"ExecutingEndpoint"} } }
{ "time": "2019-11-17 16:48:28.9913", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"Get\", controller = \"Appointment\"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get() on controller EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController (EventStoreLearning.Appointment.QueryApi).", "properties": { "RouteData": "{action = \"Get\", controller = \"Appointment\"}", "MethodInfo": "System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.JsonResult] Get()", "Controller": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController", "AssemblyName": "EventStoreLearning.Appointment.QueryApi", "EventId_Id": 3, "EventId_Name": "ControllerActionExecuting", "EventId": {"Id":3, "Name":"ControllerActionExecuting"} } }
{ "time": "2019-11-17 16:48:29.5691", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "Retrieving all appointments from DB...", "properties": {  } }
{ "time": "2019-11-17 16:48:29.9699", "level": "DEBUG", "logger": "EventStoreLearning.Appointment.ReadModel.Repositories.AppointmentRepository", "message": "3 appointments found.", "properties": {  } }
{ "time": "2019-11-17 16:48:30.0165", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.NewtonsoftJson.NewtonsoftJsonResultExecutor", "message": "Executing JsonResult, writing value of type 'System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "properties": { "Type": "System.Collections.Generic.List`1[[EventStoreLearning.Appointment.QueryApi.Contract.Appointment, EventStoreLearning.Appointment.QueryApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId_Id": 1, "EventId_Name": "JsonResultExecuting", "EventId": {"Id":1, "Name":"JsonResultExecuting"} } }
{ "time": "2019-11-17 16:48:30.0370", "level": "INFO", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi) in 1036.6671000000001ms", "properties": { "ActionName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "ElapsedMilliseconds": 1036.6671000000001, "EventId_Id": 2, "EventId_Name": "ActionExecuted", "EventId": {"Id":2, "Name":"ActionExecuted"} } }
{ "time": "2019-11-17 16:48:30.0411", "level": "INFO", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)'", "properties": { "EndpointName": "EventStoreLearning.Appointment.QueryApi.Controllers.AppointmentController.Get (EventStoreLearning.Appointment.QueryApi)", "EventId_Id": 1, "EventId_Name": "ExecutedEndpoint", "EventId": {"Id":1, "Name":"ExecutedEndpoint"} } }
{ "time": "2019-11-17 16:48:30.0460", "level": "INFO", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished in 1108.8347ms 200 application\/json; charset=utf-8", "properties": { "ElapsedMilliseconds": 1108.8347, "StatusCode": 200, "ContentType": "application\/json; charset=utf-8", "EventId_Id": 2, "EventId_Name": null, "EventId": {"Id":2} } }
